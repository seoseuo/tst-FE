name: Deploy with Docker

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create .env.local
        run: |
          echo "NEXT_PUBLIC_SPRINGBOOT_URL=${{ secrets.NEXT_PUBLIC_SPRINGBOOT_URL }}" >> .env.local
          echo "NEXT_PUBLIC_S3_URL=${{ secrets.NEXT_PUBLIC_S3_URL }}" >> .env.local
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build & Push
        run: |
          docker build --no-cache -t seuo/tst-fe-image:latest .
          docker push seuo/tst-fe-image:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Load SSH key and start agent
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PEM_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Disable strict host key checking
        run: |
          printf "Host *\n\tStrictHostKeyChecking no\n\n" >> ~/.ssh/config

      - name: Deploy via SSH
        run: |
          ssh ubuntu@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            cd ~/wannago-deploy || mkdir ~/wannago-deploy && cd ~/wannago-deploy

            # Clean up old containers
            docker stop tst-fe || true
            docker rm tst-fe || true
            docker stop nginx || true
            docker rm nginx || true
            docker stop goaccess || true
            docker rm goaccess || true

            # Pull latest image
            docker pull seuo/tst-fe-image:latest

            # Write docker-compose.yml
            cat > docker-compose.yml << 'DCEOF'
version: "3.8"
services:
  frontend:
    container_name: tst-fe
    image: seuo/tst-fe-image:latest
    restart: always
    expose:
      - "3000"
    networks:
      - frontend-net

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-logs:/var/log/nginx
    depends_on:
      - frontend
    networks:
      - frontend-net

  goaccess:
    image: allinurl/goaccess
    container_name: goaccess
    environment:
      - GOACCESS_ACCESS_LOG=/var/log/nginx/access.log
      - GOACCESS_OUTPUT_FILE=/usr/share/nginx/html/report.html
    ports:
      - "7890:7890"
    volumes:
      - ./nginx-logs:/var/log/nginx
      - ./goaccess-report:/usr/share/nginx/html
    networks:
      - frontend-net
    depends_on:
      - nginx

networks:
  frontend-net:
    driver: bridge
DCEOF

            # Write nginx.conf
            cat > nginx.conf << 'NGEF'
events {}
http {
  access_log /var/log/nginx/access.log;
  server {
    listen 80;
    location / {
      proxy_pass http://frontend:3000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }
}
NGEF

            docker compose down
            docker compose up -d
          EOF
